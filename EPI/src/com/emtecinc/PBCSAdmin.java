/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.emtecinc;

import com.emtecinc.AcceptReject;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.beans.PropertyChangeListener;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import static javax.management.Query.value;
import javax.swing.Action;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JTable;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.TableColumnModelEvent;
import javax.swing.event.TableColumnModelListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;


/**
 *
 * @author Randall.Miller
 */
public class PBCSAdmin extends javax.swing.JFrame {
    public File flSourceFile;
    pbcsDLManager dlManager = new pbcsDLManager();
    pbcsFSManager fsManager = new pbcsFSManager();
    AcceptReject accRej = new AcceptReject(this,true);
    ExportTblToFile export;
    
    JLabel jobIDLabel = new JLabel();
    
    //static int[] arrDataColumn;
    static ArrayList<String> arrDataColumn = new ArrayList<>();
    static ArrayList<String> arrIgnoreColumn = new ArrayList<>();
    //static String[] arrDataColumn;
    ArrayList<String> arrColNames = new ArrayList<>();
    HashMap hm = new HashMap();
    static String pbcsUserName;
    static String pbcsPassword;
    static String pbcsDomain;
    static String pbcsUrl;
    static String pbcsHPUrl;
    static String pbcsLCMUrl;
    static Boolean blnIsLoggedIn = false;
    ArrayList<String> eventColumns = new ArrayList<String>();
    ArrayList<String[]> eventRows = new ArrayList<String[]>();
    ArrayList<String[]> propList = new ArrayList<String[]>();
    String oldColumnName;
    
    /**
     * Creates new form PBCSAdmin
     */
    public PBCSAdmin() {
        initComponents();
        dlManager.getTableColumnMoves(jTable1);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btgDelimiter = new javax.swing.ButtonGroup();
        jdFindReplace = new javax.swing.JDialog();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblFindReplace = new javax.swing.JTable();
        btnFnRClose = new javax.swing.JButton();
        btnFnROK = new javax.swing.JButton();
        lblFnRSelectedCol = new javax.swing.JLabel();
        btnFnRRemove = new javax.swing.JButton();
        btnFnRAdd = new javax.swing.JButton();
        btnFnRNext = new javax.swing.JButton();
        btnFnRPrev = new javax.swing.JButton();
        btnSaveFnR = new javax.swing.JButton();
        MainTabbedPane = new javax.swing.JTabbedPane();
        tabLogin = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        lblURL = new javax.swing.JLabel();
        lblPassword = new javax.swing.JLabel();
        lblUser = new javax.swing.JLabel();
        lblDomain = new javax.swing.JLabel();
        txtURL = new javax.swing.JTextField();
        txtDomain = new javax.swing.JTextField();
        txtUser = new javax.swing.JTextField();
        pwdPassword = new javax.swing.JPasswordField();
        btnLogin = new javax.swing.JButton();
        lblDBG = new javax.swing.JLabel();
        lblPassword1 = new javax.swing.JLabel();
        lblApp = new javax.swing.JLabel();
        tabDLMgr = new javax.swing.JPanel();
        pnlDSMgmt = new javax.swing.JPanel();
        lblDelim = new javax.swing.JLabel();
        rbComma = new javax.swing.JRadioButton();
        rbSpace = new javax.swing.JRadioButton();
        rbTab = new javax.swing.JRadioButton();
        rbCustom = new javax.swing.JRadioButton();
        txtCustDelim = new javax.swing.JTextField();
        btnLoadSQL = new javax.swing.JButton();
        lblDisplayRows = new javax.swing.JLabel();
        txtDisplayRows = new javax.swing.JTextField();
        lblStartRow = new javax.swing.JLabel();
        txtStartRow = new javax.swing.JTextField();
        lblDisplayRows2 = new javax.swing.JLabel();
        txtHeaderRows = new javax.swing.JTextField();
        btnBrowse = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnRefresh = new javax.swing.JButton();
        pnlColProps = new javax.swing.JPanel();
        lblColumn = new javax.swing.JLabel();
        lblPrefix = new javax.swing.JLabel();
        txtPrefix = new javax.swing.JTextField();
        lblSuffix = new javax.swing.JLabel();
        txtSuffix = new javax.swing.JTextField();
        btnUpdateField = new javax.swing.JButton();
        lblColName = new javax.swing.JLabel();
        txtColName = new javax.swing.JTextField();
        cbData = new javax.swing.JCheckBox();
        btnPrevField = new javax.swing.JButton();
        btnNextField = new javax.swing.JButton();
        cbFlipSign = new javax.swing.JCheckBox();
        cbIgnoreCol = new javax.swing.JCheckBox();
        btnFindReplace = new javax.swing.JButton();
        btnAccRej = new javax.swing.JButton();
        btnColumnActions = new javax.swing.JButton();
        btnExport = new javax.swing.JButton();
        btnLoadProfile = new javax.swing.JButton();
        btnSaveProfile = new javax.swing.JButton();
        tabFSMgr = new javax.swing.JPanel();
        pnlLoadData = new javax.swing.JPanel();
        btnCldUpload = new javax.swing.JButton();
        btnCldDownload = new javax.swing.JButton();
        btnCldDelete = new javax.swing.JButton();
        btnCldRefresh = new javax.swing.JButton();
        lblLoadFiles = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblFiles = new javax.swing.JTable();
        btnLoad = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        lstJobs = new javax.swing.JList<>();
        lblImportJobs = new javax.swing.JLabel();
        pnlJobDetails = new javax.swing.JPanel();
        lblJobID = new javax.swing.JLabel();
        lblJobName = new javax.swing.JLabel();
        lblJobStatus = new javax.swing.JLabel();
        lblJobDetails = new javax.swing.JLabel();
        titleJobID = new javax.swing.JLabel();
        titleJobName = new javax.swing.JLabel();
        titleJobStatus = new javax.swing.JLabel();
        titleJobDetails = new javax.swing.JLabel();

        rbComma.doClick();

        jdFindReplace.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jdFindReplace.setTitle("Find/Replace");
        jdFindReplace.setAlwaysOnTop(true);
        jdFindReplace.setBounds(new java.awt.Rectangle(100, 100, 400, 385));
        jdFindReplace.setLocation(new java.awt.Point(0, 0));

        tblFindReplace.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "<HTML>&nbsp<BR>Replace<BR>&nbsp</HTML>", "With", "<HTML>Match<BR>Whole<BR>Word</HTML>", "<HTML>Match<BR>Case</HTML>"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblFindReplace.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tblFindReplace.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(tblFindReplace);

        btnFnRClose.setText("Close");
        btnFnRClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFnRCloseActionPerformed(evt);
            }
        });

        btnFnROK.setText("OK");
        btnFnROK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFnROKActionPerformed(evt);
            }
        });

        lblFnRSelectedCol.setText("Selected Column: ");
        lblFnRSelectedCol.setToolTipText("");

        btnFnRRemove.setText("Remove");
        btnFnRRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFnRRemoveActionPerformed(evt);
            }
        });

        btnFnRAdd.setText("Add");
        btnFnRAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFnRAddActionPerformed(evt);
            }
        });

        btnFnRNext.setText("Next Field");
        btnFnRNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFnRNextActionPerformed(evt);
            }
        });

        btnFnRPrev.setText("Prev Field");
        btnFnRPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFnRPrevActionPerformed(evt);
            }
        });

        btnSaveFnR.setText("Save");
        btnSaveFnR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveFnRActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jdFindReplaceLayout = new javax.swing.GroupLayout(jdFindReplace.getContentPane());
        jdFindReplace.getContentPane().setLayout(jdFindReplaceLayout);
        jdFindReplaceLayout.setHorizontalGroup(
            jdFindReplaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jdFindReplaceLayout.createSequentialGroup()
                .addGroup(jdFindReplaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jdFindReplaceLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jdFindReplaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblFnRSelectedCol)))
                    .addGroup(jdFindReplaceLayout.createSequentialGroup()
                        .addGroup(jdFindReplaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jdFindReplaceLayout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addComponent(btnFnRAdd)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnFnRRemove)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnFnRPrev))
                            .addGroup(jdFindReplaceLayout.createSequentialGroup()
                                .addGap(124, 124, 124)
                                .addComponent(btnFnROK)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnFnRClose)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jdFindReplaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnSaveFnR)
                            .addComponent(btnFnRNext))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jdFindReplaceLayout.setVerticalGroup(
            jdFindReplaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jdFindReplaceLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblFnRSelectedCol)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jdFindReplaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFnRRemove)
                    .addComponent(btnFnRAdd)
                    .addComponent(btnFnRNext)
                    .addComponent(btnFnRPrev))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jdFindReplaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFnRClose)
                    .addComponent(btnFnROK)
                    .addComponent(btnSaveFnR))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        MainTabbedPane.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);

        lblURL.setText("PBCS URL:");

        lblPassword.setText("Password:");

        lblUser.setText("UserName:");

        lblDomain.setText("Domain:");

        txtURL.setText("https://xxx.pbcs.us2.oraclecloud.com");
        txtURL.setToolTipText("");
        if (pbcsConstants.DBG){
            txtURL.setText(pbcsConstants.DBG_PBCS_URL);
        } else {
            txtURL.setText("https://xxx.pbcs.us2.oraclecloud.com");
        }

        txtDomain.setToolTipText("");
        if (pbcsConstants.DBG){
            txtDomain.setText(pbcsConstants.DBG_PBCS_DOMAIN);
        } else {
            txtDomain.setText("");
        }

        txtUser.setToolTipText("");
        if (pbcsConstants.DBG){
            txtUser.setText(pbcsConstants.DBG_PBCS_USER);
        } else {
            txtUser.setText("");
        }

        if (pbcsConstants.DBG){
            pwdPassword.setText(pbcsConstants.DBG_PBCS_PASS);
        } else {
            pwdPassword.setText("");
        }

        btnLogin.setText("Login");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        lblDBG.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        lblDBG.setForeground(new java.awt.Color(255, 0, 0));
        lblDBG.setText("DEBUG MODE");
        if (pbcsConstants.DBG){
            lblDBG.setVisible(true);
        } else {
            lblDBG.setVisible(false);
        }

        lblPassword1.setText("Application:");

        lblApp.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblApp.setText("     ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblDBG, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblURL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblDomain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblPassword, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblPassword1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtURL, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                            .addComponent(txtDomain)
                            .addComponent(txtUser)
                            .addComponent(pwdPassword)
                            .addComponent(lblApp)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(193, 193, 193)
                        .addComponent(btnLogin)))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(lblDBG)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblURL, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtURL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDomain, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDomain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUser, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pwdPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(btnLogin)
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPassword1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblApp))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout tabLoginLayout = new javax.swing.GroupLayout(tabLogin);
        tabLogin.setLayout(tabLoginLayout);
        tabLoginLayout.setHorizontalGroup(
            tabLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabLoginLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        tabLoginLayout.setVerticalGroup(
            tabLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabLoginLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        MainTabbedPane.addTab("Login", tabLogin);

        tabDLMgr.setPreferredSize(new java.awt.Dimension(1450, 512));

        pnlDSMgmt.setBackground(new java.awt.Color(153, 204, 255));
        pnlDSMgmt.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Data Source Properties", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        lblDelim.setText("Delimiter");

        btgDelimiter.add(rbComma);
        rbComma.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        rbComma.setText("Comma");

        btgDelimiter.add(rbSpace);
        rbSpace.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        rbSpace.setText("Space");

        btgDelimiter.add(rbTab);
        rbTab.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        rbTab.setText("Tab");

        btgDelimiter.add(rbCustom);
        rbCustom.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        rbCustom.setText("Custom");

        btnLoadSQL.setText("Load SQL");
        btnLoadSQL.setEnabled(false);

        lblDisplayRows.setText("Rows to Display");

        txtDisplayRows.setText("500");

        lblStartRow.setText("Start Row");
        lblStartRow.setToolTipText("");

        txtStartRow.setText("1");

        lblDisplayRows2.setText("Header Rows");

        btnBrowse.setText("Load File");
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlDSMgmtLayout = new javax.swing.GroupLayout(pnlDSMgmt);
        pnlDSMgmt.setLayout(pnlDSMgmtLayout);
        pnlDSMgmtLayout.setHorizontalGroup(
            pnlDSMgmtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDSMgmtLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDSMgmtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlDSMgmtLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(btnBrowse)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLoadSQL))
                    .addComponent(lblDelim, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlDSMgmtLayout.createSequentialGroup()
                        .addComponent(lblDisplayRows)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtDisplayRows, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDSMgmtLayout.createSequentialGroup()
                        .addGroup(pnlDSMgmtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDisplayRows2)
                            .addComponent(lblStartRow))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlDSMgmtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtStartRow)
                            .addGroup(pnlDSMgmtLayout.createSequentialGroup()
                                .addComponent(txtHeaderRows, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(50, 50, 50))))
                    .addGroup(pnlDSMgmtLayout.createSequentialGroup()
                        .addGroup(pnlDSMgmtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlDSMgmtLayout.createSequentialGroup()
                                .addComponent(rbComma, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rbTab, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlDSMgmtLayout.createSequentialGroup()
                                .addComponent(rbSpace, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rbCustom, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCustDelim)))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        pnlDSMgmtLayout.setVerticalGroup(
            pnlDSMgmtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDSMgmtLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDSMgmtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLoadSQL)
                    .addComponent(btnBrowse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblDelim, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDSMgmtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(rbComma, javax.swing.GroupLayout.PREFERRED_SIZE, 18, Short.MAX_VALUE)
                    .addComponent(rbTab, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDSMgmtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbSpace, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbCustom, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCustDelim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDSMgmtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDisplayRows)
                    .addComponent(txtDisplayRows, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(pnlDSMgmtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStartRow)
                    .addComponent(txtStartRow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDSMgmtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDisplayRows2)
                    .addComponent(txtHeaderRows, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        lblDelim.getAccessibleContext().setAccessibleName("lblDelim");

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable1.setColumnSelectionAllowed(true);
        jTable1.setDragEnabled(true);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jTable1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTable1PropertyChange(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable1KeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        btnRefresh.setText("Refresh Table");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        pnlColProps.setBackground(new java.awt.Color(204, 204, 204));
        pnlColProps.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlColProps.setForeground(new java.awt.Color(204, 204, 204));

        lblColumn.setText("Select Column to Edit");

        lblPrefix.setBackground(new java.awt.Color(0, 0, 0));
        lblPrefix.setText("Prefix");
        lblPrefix.setMaximumSize(new java.awt.Dimension(35, 16));
        lblPrefix.setMinimumSize(new java.awt.Dimension(35, 16));
        lblPrefix.setPreferredSize(new java.awt.Dimension(35, 16));

        txtPrefix.setEnabled(false);
        txtPrefix.setMaximumSize(new java.awt.Dimension(60, 24));
        txtPrefix.setMinimumSize(new java.awt.Dimension(60, 24));

        lblSuffix.setText("Suffix");
        lblSuffix.setMaximumSize(new java.awt.Dimension(35, 16));
        lblSuffix.setMinimumSize(new java.awt.Dimension(35, 16));
        lblSuffix.setPreferredSize(new java.awt.Dimension(35, 16));

        txtSuffix.setEnabled(false);
        txtSuffix.setMaximumSize(new java.awt.Dimension(60, 24));
        txtSuffix.setMinimumSize(new java.awt.Dimension(60, 24));

        btnUpdateField.setText("Update Field");
        btnUpdateField.setEnabled(false);
        btnUpdateField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateFieldActionPerformed(evt);
            }
        });

        lblColName.setBackground(new java.awt.Color(0, 0, 0));
        lblColName.setText("Column Name");
        lblColName.setMaximumSize(new java.awt.Dimension(35, 16));
        lblColName.setMinimumSize(new java.awt.Dimension(35, 16));
        lblColName.setPreferredSize(new java.awt.Dimension(35, 16));

        txtColName.setEnabled(false);
        txtColName.setMaximumSize(new java.awt.Dimension(60, 24));
        txtColName.setMinimumSize(new java.awt.Dimension(60, 24));

        cbData.setText("Data Field");
        cbData.setEnabled(false);

        btnPrevField.setText("Prev Field");
        btnPrevField.setEnabled(false);
        btnPrevField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevFieldActionPerformed(evt);
            }
        });

        btnNextField.setText("Next Field");
        btnNextField.setEnabled(false);
        btnNextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextFieldActionPerformed(evt);
            }
        });

        cbFlipSign.setText("Flip Sign");
        cbFlipSign.setEnabled(false);

        cbIgnoreCol.setText("Ignore Column");
        cbIgnoreCol.setEnabled(false);

        btnFindReplace.setText("Find & Replace");
        btnFindReplace.setEnabled(false);
        btnFindReplace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindReplaceActionPerformed(evt);
            }
        });

        btnAccRej.setText("Accept / Reject");
        btnAccRej.setEnabled(false);
        btnAccRej.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAccRejActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlColPropsLayout = new javax.swing.GroupLayout(pnlColProps);
        pnlColProps.setLayout(pnlColPropsLayout);
        pnlColPropsLayout.setHorizontalGroup(
            pnlColPropsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlColPropsLayout.createSequentialGroup()
                .addGroup(pnlColPropsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblColumn)
                    .addGroup(pnlColPropsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pnlColPropsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbIgnoreCol)
                            .addGroup(pnlColPropsLayout.createSequentialGroup()
                                .addComponent(cbData)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbFlipSign))
                            .addGroup(pnlColPropsLayout.createSequentialGroup()
                                .addGroup(pnlColPropsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(lblSuffix, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
                                    .addComponent(lblPrefix, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblColName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlColPropsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtColName, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                                    .addComponent(txtPrefix, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtSuffix, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(pnlColPropsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(btnAccRej, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnFindReplace, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(pnlColPropsLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(btnPrevField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnNextField))
                    .addGroup(pnlColPropsLayout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(btnUpdateField)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlColPropsLayout.setVerticalGroup(
            pnlColPropsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlColPropsLayout.createSequentialGroup()
                .addComponent(lblColumn)
                .addGap(7, 7, 7)
                .addGroup(pnlColPropsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblColName, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtColName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlColPropsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPrefix, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPrefix, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlColPropsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSuffix, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSuffix, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlColPropsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbData)
                    .addComponent(cbFlipSign))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbIgnoreCol)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnFindReplace)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAccRej)
                .addGap(25, 25, 25)
                .addComponent(btnUpdateField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlColPropsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnNextField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPrevField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        btnColumnActions.setEnabled(false);
        btnColumnActions.setLabel("Column Actions");
        btnColumnActions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnColumnActionsActionPerformed(evt);
            }
        });

        btnExport.setText("Export to File");
        btnExport.setEnabled(false);
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });

        btnLoadProfile.setText("Load Profile");
        btnLoadProfile.setEnabled(false);
        btnLoadProfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadProfileActionPerformed(evt);
            }
        });

        btnSaveProfile.setText("Save Profile");
        btnSaveProfile.setEnabled(false);
        btnSaveProfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveProfileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tabDLMgrLayout = new javax.swing.GroupLayout(tabDLMgr);
        tabDLMgr.setLayout(tabDLMgrLayout);
        tabDLMgrLayout.setHorizontalGroup(
            tabDLMgrLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabDLMgrLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabDLMgrLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlDSMgmt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlColProps, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tabDLMgrLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(tabDLMgrLayout.createSequentialGroup()
                        .addComponent(btnRefresh)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnColumnActions)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExport)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSaveProfile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLoadProfile))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1250, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        tabDLMgrLayout.setVerticalGroup(
            tabDLMgrLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabDLMgrLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabDLMgrLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabDLMgrLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(tabDLMgrLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnRefresh)
                            .addComponent(btnColumnActions)
                            .addComponent(btnExport)
                            .addComponent(btnLoadProfile)
                            .addComponent(btnSaveProfile))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(tabDLMgrLayout.createSequentialGroup()
                        .addComponent(pnlDSMgmt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlColProps, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(6, 6, 6))
        );

        MainTabbedPane.addTab("Data Load Manager", tabDLMgr);

        pnlLoadData.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Load Data", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Dialog", 1, 18))); // NOI18N
        pnlLoadData.setForeground(new java.awt.Color(153, 204, 255));

        btnCldUpload.setForeground(javax.swing.UIManager.getDefaults().getColor("Button.darcula.color1"));
        btnCldUpload.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/emtecinc/images/cloud_upload_24x16.png"))); // NOI18N
        btnCldUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCldUploadActionPerformed(evt);
            }
        });

        btnCldDownload.setForeground(javax.swing.UIManager.getDefaults().getColor("Button.darcula.color1"));
        btnCldDownload.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/emtecinc/images/cloud_download_24x24.png"))); // NOI18N
        btnCldDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCldDownloadActionPerformed(evt);
            }
        });

        btnCldDelete.setForeground(javax.swing.UIManager.getDefaults().getColor("Button.darcula.color1"));
        btnCldDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/emtecinc/images/cloud_delete_24x24.png"))); // NOI18N
        btnCldDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCldDeleteActionPerformed(evt);
            }
        });

        btnCldRefresh.setForeground(javax.swing.UIManager.getDefaults().getColor("Button.darcula.color1"));
        btnCldRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/emtecinc/images/cloud_refresh_24x24.png"))); // NOI18N
        btnCldRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCldRefreshActionPerformed(evt);
            }
        });

        lblLoadFiles.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblLoadFiles.setText("Data Files");

        tblFiles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "File Names", "Modified Date", "Size"
            }
        ));
        tblFiles.setShowHorizontalLines(false);
        tblFiles.getTableHeader().setReorderingAllowed(false);
        jScrollPane5.setViewportView(tblFiles);

        btnLoad.setText("Load Data");
        btnLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(lstJobs);

        lblImportJobs.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblImportJobs.setText("Import Jobs");

        javax.swing.GroupLayout pnlLoadDataLayout = new javax.swing.GroupLayout(pnlLoadData);
        pnlLoadData.setLayout(pnlLoadDataLayout);
        pnlLoadDataLayout.setHorizontalGroup(
            pnlLoadDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoadDataLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlLoadDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlLoadDataLayout.createSequentialGroup()
                        .addGroup(pnlLoadDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlLoadDataLayout.createSequentialGroup()
                                .addComponent(btnCldUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCldDownload, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCldDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCldRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblLoadFiles))
                        .addGap(0, 150, Short.MAX_VALUE))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlLoadDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblImportJobs)
                    .addComponent(btnLoad))
                .addContainerGap())
        );
        pnlLoadDataLayout.setVerticalGroup(
            pnlLoadDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoadDataLayout.createSequentialGroup()
                .addGroup(pnlLoadDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlLoadDataLayout.createSequentialGroup()
                        .addComponent(lblLoadFiles)
                        .addGap(6, 6, 6)
                        .addGroup(pnlLoadDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnCldUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCldDownload, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCldDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCldRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlLoadDataLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblImportJobs)
                        .addGap(6, 6, 6)
                        .addComponent(btnLoad)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlLoadDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        pnlJobDetails.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Latest Job Details", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Dialog", 1, 18))); // NOI18N

        lblJobID.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblJobID.setMaximumSize(new java.awt.Dimension(36, 16));
        lblJobID.setMinimumSize(new java.awt.Dimension(36, 16));
        lblJobID.setPreferredSize(new java.awt.Dimension(36, 16));

        lblJobName.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        lblJobStatus.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblJobStatus.setMaximumSize(new java.awt.Dimension(36, 16));
        lblJobStatus.setMinimumSize(new java.awt.Dimension(36, 16));
        lblJobStatus.setPreferredSize(new java.awt.Dimension(36, 16));

        lblJobDetails.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        titleJobID.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        titleJobID.setText("Job ID: ");

        titleJobName.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        titleJobName.setText("Job Name: ");

        titleJobStatus.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        titleJobStatus.setText("Job Status: ");

        titleJobDetails.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        titleJobDetails.setText("Job Details: ");

        javax.swing.GroupLayout pnlJobDetailsLayout = new javax.swing.GroupLayout(pnlJobDetails);
        pnlJobDetails.setLayout(pnlJobDetailsLayout);
        pnlJobDetailsLayout.setHorizontalGroup(
            pnlJobDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlJobDetailsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlJobDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblJobDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlJobDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pnlJobDetailsLayout.createSequentialGroup()
                            .addGroup(pnlJobDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(titleJobName, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                                .addComponent(titleJobID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(pnlJobDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblJobName, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblJobID, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(pnlJobDetailsLayout.createSequentialGroup()
                            .addGroup(pnlJobDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(titleJobStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(titleJobDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lblJobStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))))
        );
        pnlJobDetailsLayout.setVerticalGroup(
            pnlJobDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlJobDetailsLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(pnlJobDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(titleJobID)
                    .addComponent(lblJobID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlJobDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(titleJobName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblJobName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlJobDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(titleJobStatus)
                    .addComponent(lblJobStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(titleJobDetails)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblJobDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout tabFSMgrLayout = new javax.swing.GroupLayout(tabFSMgr);
        tabFSMgr.setLayout(tabFSMgrLayout);
        tabFSMgrLayout.setHorizontalGroup(
            tabFSMgrLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabFSMgrLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlLoadData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlJobDetails, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(791, Short.MAX_VALUE))
        );
        tabFSMgrLayout.setVerticalGroup(
            tabFSMgrLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabFSMgrLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabFSMgrLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlLoadData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlJobDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(359, Short.MAX_VALUE))
        );

        MainTabbedPane.addTab("System Manager", tabFSMgr);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MainTabbedPane)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(MainTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 629, Short.MAX_VALUE))
        );

        for (int i = 1; i < MainTabbedPane.getTabCount(); i++) {
            if (pbcsConstants.DBG){
                MainTabbedPane.setEnabledAt(i, true);
            } else {
                MainTabbedPane.setEnabledAt(i, false);
            }
        }

        setSize(new java.awt.Dimension(1501, 693));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        updateColProps();        
    }//GEN-LAST:event_jTable1MouseClicked

    public void updateColProps(){
        jTable1.setCellSelectionEnabled(false);
        jTable1.setRowSelectionAllowed(false);
        jTable1.setColumnSelectionAllowed(true);
        jTable1.getSelectedColumn();
        jTable1.setRowSelectionInterval(0, jTable1.getRowCount()-1);
        lblColumn.setText(jTable1.getColumnModel().getColumn(jTable1.getSelectedColumn()).getHeaderValue().toString() + " Properties");
        txtColName.setText(jTable1.getColumnModel().getColumn(jTable1.getSelectedColumn()).getHeaderValue().toString());
        oldColumnName = txtColName.getText();
       // txtColName.setText(jTable1.getColumnName(jTable1.getSelectedColumn()));
        btnColumnActions.setEnabled(true);
        // Set Column Property Objects to Enabled
        btnUpdateField.setEnabled(true);
        cbData.setEnabled(true);
        txtColName.setEnabled(true);
        txtPrefix.setEnabled(true);
        txtSuffix.setEnabled(true);
        btnFindReplace.setEnabled(true);
        cbIgnoreCol.setEnabled(true);
        btnAccRej.setEnabled(true);
        lblFnRSelectedCol.setText("Selected Column: " + lblColumn.getText());
        if (jTable1.getSelectedColumn() == 0){
            btnPrevField.setEnabled(false);
            btnFnRPrev.setEnabled(false);
        } else {
            btnPrevField.setEnabled(true);
            btnFnRPrev.setEnabled(true);
        }
        
        if (jTable1.getSelectedColumn() == jTable1.getColumnCount() - 1){
            btnNextField.setEnabled(false);
            btnFnRNext.setEnabled(false);
        } else {
            btnNextField.setEnabled(true);
            btnFnRNext.setEnabled(true);
        }
        
        // Set Data Checkbox based on array
        String columnHeader = jTable1.getColumnModel().getColumn(jTable1.getSelectedColumn()).getHeaderValue().toString();
        if (arrDataColumn.contains(columnHeader)) {
            cbData.setSelected(true);
        } else {
            cbData.setSelected(false);
        }
        if (arrIgnoreColumn.contains(columnHeader)) {
            cbIgnoreCol.setSelected(true);
        } else {
            cbIgnoreCol.setSelected(false);
        }
        
        //Set Text Boxes based on HashMap
        Object pre = hm.get(jTable1.getColumnModel().getColumn(jTable1.getSelectedColumn()).getHeaderValue().toString() + "|Prefix");
        Object suf = hm.get(jTable1.getColumnModel().getColumn(jTable1.getSelectedColumn()).getHeaderValue().toString() + "|Suffix");
        System.out.println(Arrays.toString(hm.entrySet().toArray()));
        if (pre != null) {
            txtPrefix.setText(pre.toString());
        } else {
            txtPrefix.setText("");
        }
        if (suf != null) {
            txtSuffix.setText(suf.toString());
        } else {
            txtSuffix.setText("");
        }
        //dlManager.getTableColumnMoves(jTable1);
    }

    
    
    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
        try{            
            String strDelim = "";
            if (rbComma.isSelected()){
                strDelim = ",";
            } else if (rbTab.isSelected()){
                strDelim = "\t";
            } else if (rbSpace.isSelected()){
                strDelim = " ";
            } else if (rbCustom.isSelected()){
                strDelim = txtCustDelim.getText();
            }
            
            DefaultTableModel model;
            DefaultTableModel rawModel;
            if (txtHeaderRows.getText().length() < 1) {
                //model = getModelFromCsvFile(this.flSourceFile, strDelim, false);
                //model = dlManager.getModelFromCsvFile(this.flSourceFile, strDelim, false, Integer.parseInt(txtDisplayRows.getText()), Integer.parseInt(txtStartRow.getText()));
                jTable1.setModel(dlManager.getModelFromCsvFile(this.flSourceFile, strDelim, false, Integer.parseInt(txtDisplayRows.getText()), Integer.parseInt(txtStartRow.getText())));
                //rawModel = dlManager.getModelFromCsvFile(this.flSourceFile, strDelim, false, Integer.parseInt(txtDisplayRows.getText()), Integer.parseInt(txtStartRow.getText()));
            } else {
                jTable1.setModel(dlManager.getModelFromCsvFile(this.flSourceFile, strDelim, true, Integer.parseInt(txtDisplayRows.getText()), Integer.parseInt(txtStartRow.getText())));
                //model = dlManager.getModelFromCsvFile(this.flSourceFile, strDelim, true, Integer.parseInt(txtDisplayRows.getText()), Integer.parseInt(txtStartRow.getText()));
                //rawModel = dlManager.getModelFromCsvFile(this.flSourceFile, strDelim, true, Integer.parseInt(txtDisplayRows.getText()), Integer.parseInt(txtStartRow.getText()));
            }
            //jTable1.setModel(model);
            System.gc();
            //Reset Text area and show new lines
            jTextArea1.setText("");
            ArrayList<String> arrLines = dlManager.openTextFile(flSourceFile, Integer.parseInt(txtStartRow.getText()), Integer.parseInt(txtDisplayRows.getText()));
            if (arrLines.size() >=500) {
                for (int i = 0; i < 500; i++) {
                    jTextArea1.append(arrLines.get(i) + "\n");
                }
            } else {
                for (String t: arrLines) {
                    jTextArea1.append(t + "\n");
                }
            }
            arrLines.clear();

        } catch (Throwable x) {
            
            JOptionPane.showMessageDialog(this.getParent(), "Error: " + x.getMessage());
        }
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnUpdateFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateFieldActionPerformed
        // TODO add your handling code here:
        //arrDataColumn = new String[jTable1.getColumnCount()];
       dlManager.findReplaceField(jTable1, txtPrefix.getText(), txtSuffix.getText(), jTable1.getSelectedColumn());
       System.out.println(oldColumnName + " | New " + txtColName.getText());
       dlManager.updateFindReplaceHeader(oldColumnName, txtColName.getText());
        if (!txtColName.getText().equals("")) {
            dlManager.updateEventLog(pbcsConstants.EVT_RENAME, Integer.toString(jTable1.getSelectedColumn()), Integer.toString(jTable1.getSelectedColumn()), txtColName.getText());
            dlManager.renameTableColumn(jTable1, txtColName.getText(), jTable1.getSelectedColumn());
        }
        if (!txtPrefix.getText().equals("")) {
            dlManager.updateEventLog(pbcsConstants.EVT_PREFIX, Integer.toString(jTable1.getSelectedColumn()), Integer.toString(jTable1.getSelectedColumn()), txtPrefix.getText());
            hm.put(jTable1.getColumnModel().getColumn(jTable1.getSelectedColumn()).getHeaderValue().toString() + "|Prefix", txtPrefix.getText());
            //propList.add(new String[]{jTable1.getColumnModel().getColumn(jTable1.getSelectedColumn()).getHeaderValue().toString() + "|Prefix", txtPrefix.getText()});
        }
        if (!txtSuffix.getText().equals("")) {
            dlManager.updateEventLog(pbcsConstants.EVT_SUFFIX, Integer.toString(jTable1.getSelectedColumn()), Integer.toString(jTable1.getSelectedColumn()), txtSuffix.getText());
            hm.put(jTable1.getColumnModel().getColumn(jTable1.getSelectedColumn()).getHeaderValue().toString()+ "|Suffix", txtSuffix.getText());
        }
        if (cbData.isSelected()) {
            dlManager.updateEventLog(pbcsConstants.EVT_DATA, Integer.toString(jTable1.getSelectedColumn()), Integer.toString(jTable1.getSelectedColumn()), "Selected");
            //arrDataColumn.add(jTable1.getColumnModel().getColumn(jTable1.getSelectedColumn()).getHeaderValue().toString());
            arrDataColumn.add(jTable1.getSelectedColumn(), jTable1.getColumnModel().getColumn(jTable1.getSelectedColumn()).getHeaderValue().toString());
        } else {
            if (!arrDataColumn.get(jTable1.getSelectedColumn()).isEmpty()) {
                arrDataColumn.set(jTable1.getSelectedColumn(), "");
            }
        }
        if (cbIgnoreCol.isSelected()) {
            dlManager.updateEventLog(pbcsConstants.EVT_IGNORE_COLUMN, Integer.toString(jTable1.getSelectedColumn()), Integer.toString(jTable1.getSelectedColumn()), "Selected");
            //arrDataColumn.add(jTable1.getColumnModel().getColumn(jTable1.getSelectedColumn()).getHeaderValue().toString());
            arrIgnoreColumn.add(jTable1.getSelectedColumn(), jTable1.getColumnModel().getColumn(jTable1.getSelectedColumn()).getHeaderValue().toString());
        } else {
            if (!arrIgnoreColumn.get(jTable1.getSelectedColumn()).isEmpty()) {
                arrIgnoreColumn.set(jTable1.getSelectedColumn(), "");
            }
        }
//        for (Object t: dlManager.eventRows){
//            if (t instanceof String[]){
//                String[] arr = (String[]) t;
//                System.out.println(Arrays.toString(arr));
//            }
//        }


//        Can't check if cbIgnore is selected as if you switch columns it will become unselected. Need to test against some stored value. 
//        jTable1.setDefaultRenderer(Object.class, new DefaultTableCellRenderer()
//        {
//            @Override
//            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)
//            {
//                if (cbIgnoreCol.isSelected()) {
//                    setBackground(Color.RED);
//                } else {
//                    setBackground(null);
//                }
//
//                super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
//                return this;
//            }  
//        });
    }//GEN-LAST:event_btnUpdateFieldActionPerformed

    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
        // TODO add your handling code here:
        jTextArea1.setText("");
        final JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setFileFilter(new FileNameExtensionFilter("Text Files", "txt"));
        int returnVal = fc.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION){
            flSourceFile = fc.getSelectedFile();
            ArrayList<String> arrLines = dlManager.openTextFile(flSourceFile, Integer.parseInt(txtStartRow.getText()), Integer.parseInt(txtDisplayRows.getText()));
            if (arrLines.size() >= 500) {
                for (int i = 0; i < 500; i++) {
                    jTextArea1.append(arrLines.get(i) + "\n");
                }
            } else {
                for (String t : arrLines) {
                    jTextArea1.append(t + "\n");
                }
            }
            arrLines.clear();
        } else {
            JOptionPane.showMessageDialog(null, "Open command cancelled by user.");
        }
    }//GEN-LAST:event_btnBrowseActionPerformed

    private void btnColumnActionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnColumnActionsActionPerformed
        // TODO add your handling code here:
        int selectedColumn = jTable1.getSelectedColumn();
        JTextField colHeader = new JTextField();
        JTextField textValue = new JTextField();
        
        JComboBox leftCol = new JComboBox();
        JComboBox rightCol = new JComboBox();
        JTextField splitChar = new JTextField();
        
        JComboBox splitBy = new JComboBox();
        splitBy.addItem("Delimiter");
        splitBy.addItem("Number of Characters");
        JTextField splitNum = new JTextField();
        
        JComboBox columnAction = new JComboBox();
        columnAction.addItem("Create from Text");
        columnAction.addItem("Create/Duplicate from Join");
        columnAction.addItem("Split");
        
        JCheckBox cbDeleteColumns = new JCheckBox();
        
        //fill drop-downs with column names
        ArrayList<String> columns = dlManager.getTableColumnNames(jTable1);
        for (String column: columns){
            leftCol.addItem(column);
            rightCol.addItem(column);
        }
        Object[] newField = {
            "Column Action: ", columnAction
        };
        int option = JOptionPane.showConfirmDialog(this.getParent(), newField, "Column Information", JOptionPane.OK_CANCEL_OPTION);
        if (option == JOptionPane.OK_OPTION) {
            if (columnAction.getSelectedIndex() == 0){
                Object[] splitField = {
                        "Header", colHeader,
                        "Text Value", textValue
                    };
                int optCreateViaText = JOptionPane.showConfirmDialog(this.getParent(), splitField, "Create Via Text", JOptionPane.OK_CANCEL_OPTION);
                if (optCreateViaText == JOptionPane.OK_OPTION) {
                    dlManager.addTableColumn(jTable1, colHeader.getText(), textValue.getText());
                    dlManager.updateEventLog(pbcsConstants.EVT_ADD, Integer.toString(jTable1.getColumnModel().getColumnIndex((Object)colHeader.getText())), Integer.toString(jTable1.getColumnModel().getColumnIndex((Object)colHeader.getText())), colHeader.getText());
                    dlManager.updateEventLog(pbcsConstants.EVT_COLUMN_VALUES, Integer.toString(jTable1.getColumnModel().getColumnIndex((Object)colHeader.getText())), Integer.toString(jTable1.getColumnModel().getColumnIndex((Object)colHeader.getText())), textValue.getText());
                    arrDataColumn.add("");
                    arrIgnoreColumn.add("");
                }
            } else if (columnAction.getSelectedIndex() == 1){
                Object[] createDupJoin = {
                    "Left Column", leftCol,
                    "Right Column", rightCol,
                    "Header", colHeader,
                    "Split Character", splitChar,
                    "Delete source columns?", cbDeleteColumns
                };
                int optCreateDupJoin = JOptionPane.showConfirmDialog(this.getParent(), createDupJoin, "Create/Duplicate Via Join", JOptionPane.OK_CANCEL_OPTION);
                if (optCreateDupJoin == JOptionPane.OK_OPTION) {
                    if (cbDeleteColumns.isSelected()){
                        dlManager.updateEventLog(pbcsConstants.EVT_CREATE_JOIN, Integer.toString(leftCol.getSelectedIndex())
                                + " " + Integer.toString(rightCol.getSelectedIndex()), Integer.toString(jTable1.getColumnCount()), splitChar.getText());
                        dlManager.updateEventLog(pbcsConstants.EVT_RENAME, Integer.toString(jTable1.getColumnCount()),
                                Integer.toString(jTable1.getColumnCount()), colHeader.getText());
                        dlManager.updateEventLog(pbcsConstants.EVT_DELETE_COLUMN, Integer.toString(leftCol.getSelectedIndex()),
                                Integer.toString(rightCol.getSelectedIndex()), colHeader.getText());
//                      dlManager.updateEventLog(pbcsConstants.EVT_DELETE_COLUMN, Integer.toString(rightCol.getSelectedIndex()),
//                              Integer.toString(rightCol.getSelectedIndex()), colHeader.getText());
                        dlManager.duplicateColumn(jTable1, colHeader.getText(), leftCol.getSelectedItem().toString(), 
                                rightCol.getSelectedItem().toString(), splitChar.getText(), true);
                    } else {
                        dlManager.duplicateColumn(jTable1, colHeader.getText(), leftCol.getSelectedItem().toString(), 
                                rightCol.getSelectedItem().toString(), splitChar.getText(), false);
                        dlManager.updateEventLog(pbcsConstants.EVT_CREATE_JOIN, jTable1.getColumnModel().getColumnIndex(leftCol.getSelectedItem().toString())
                                + " " + jTable1.getColumnModel().getColumnIndex(rightCol.getSelectedItem().toString()),
                                Integer.toString(jTable1.getColumnCount() - 1), splitChar.getText());
                        dlManager.updateEventLog(pbcsConstants.EVT_RENAME, Integer.toString(jTable1.getColumnCount() - 1),
                                Integer.toString(jTable1.getColumnCount() - 1), colHeader.getText());
                        arrDataColumn.add("");
                        arrIgnoreColumn.add("");
                    }
                }
            } else if (columnAction.getSelectedIndex() == 2){
                Object[] splitCols = {
                        //"Column", leftCol,
                        "Split By", splitBy,
                        "Delimiter/# of Characters", splitNum
                };
                int optSplit = JOptionPane.showConfirmDialog(this.getParent(), splitCols, "Split Columns", JOptionPane.OK_CANCEL_OPTION);
                if (optSplit == JOptionPane.OK_OPTION) {
                    boolean bSplitBy = false;
                    if (splitBy.getSelectedIndex() == 1){
                        bSplitBy = true;
                    }
                    dlManager.splitColumn(jTable1, bSplitBy, splitNum.getText());
                    arrDataColumn.add("");
                    arrIgnoreColumn.add("");
                    if (bSplitBy) {
                        dlManager.updateEventLog(pbcsConstants.EVT_SPLIT_CHARS, Integer.toString(selectedColumn), Integer.toString(jTable1.getColumnCount() - 1), splitNum.getText());
                    } else {
                        dlManager.updateEventLog(pbcsConstants.EVT_SPLIT_DELIM, Integer.toString(selectedColumn), Integer.toString(jTable1.getColumnCount() - 1), splitNum.getText());
                    }
                }
            }
            
            
            
            
            
//            switch (columnAction.getSelectedIndex()) {
//                case 0:
//
//                    Object[] splitField = {
//                        "Header", colHeader,
//                        "Text Value", textValue
//                    };
//                int optCreateViaText = JOptionPane.showConfirmDialog(this.getParent(), splitField, "Create Via Text", JOptionPane.OK_CANCEL_OPTION);
//                if (optCreateViaText == JOptionPane.OK_OPTION) {
//                    dlManager.addTableColumn(jTable1, colHeader.getText(), textValue.getText());
//                    dlManager.updateEventLog(pbcsConstants.EVT_ADD, Integer.toString(jTable1.getColumnModel().getColumnIndex((Object)colHeader.getText())), Integer.toString(jTable1.getColumnModel().getColumnIndex((Object)colHeader.getText())), colHeader.getText());
//                    dlManager.updateEventLog(pbcsConstants.EVT_COLUMN_VALUES, Integer.toString(jTable1.getColumnModel().getColumnIndex((Object)colHeader.getText())), Integer.toString(jTable1.getColumnModel().getColumnIndex((Object)colHeader.getText())), colHeader.getText());
//                }
//                case 1:
//                    Object[] createDupJoin = {
//                        "Left Column", leftCol,
//                        "Right Column", rightCol,
//                        "Header", colHeader,
//                        "Split Character", splitChar,
//                        "Delete source columns?", cbDeleteColumns
//                    };
//                    int optCreateDupJoin = JOptionPane.showConfirmDialog(this.getParent(), createDupJoin, "Create/Duplicate Via Join", JOptionPane.OK_CANCEL_OPTION);
//                    if (optCreateDupJoin == JOptionPane.OK_OPTION) {
//                        if (cbDeleteColumns.isSelected()){
//                            dlManager.updateEventLog(pbcsConstants.EVT_CREATE_JOIN, Integer.toString(leftCol.getSelectedIndex())
//                                    + " " + Integer.toString(rightCol.getSelectedIndex()), Integer.toString(jTable1.getColumnCount()), splitChar.getText());
//                            dlManager.updateEventLog(pbcsConstants.EVT_RENAME, Integer.toString(jTable1.getColumnCount()),
//                                    Integer.toString(jTable1.getColumnCount()), colHeader.getText());
//                            dlManager.updateEventLog(pbcsConstants.EVT_DELETE_COLUMN, Integer.toString(leftCol.getSelectedIndex()),
//                                    Integer.toString(rightCol.getSelectedIndex()), colHeader.getText());
////                            dlManager.updateEventLog(pbcsConstants.EVT_DELETE_COLUMN, Integer.toString(rightCol.getSelectedIndex()),
////                                    Integer.toString(rightCol.getSelectedIndex()), colHeader.getText());
//                            dlManager.duplicateColumn(jTable1, colHeader.getText(), leftCol.getSelectedItem().toString(), 
//                                    rightCol.getSelectedItem().toString(), splitChar.getText(), true);
//                        } else {
//                            dlManager.duplicateColumn(jTable1, colHeader.getText(), leftCol.getSelectedItem().toString(), 
//                                    rightCol.getSelectedItem().toString(), splitChar.getText(), false);
//                            dlManager.updateEventLog(pbcsConstants.EVT_CREATE_JOIN, jTable1.getColumnModel().getColumnIndex(leftCol.getSelectedItem().toString())
//                                    + " " + jTable1.getColumnModel().getColumnIndex(rightCol.getSelectedItem().toString()),
//                                    Integer.toString(jTable1.getColumnCount() - 1), splitChar.getText());
//                            dlManager.updateEventLog(pbcsConstants.EVT_RENAME, Integer.toString(jTable1.getColumnCount() - 1),
//                                    Integer.toString(jTable1.getColumnCount() - 1), colHeader.getText());
//                        }
//                    }
//                case 2:
//                    Object[] splitCols = {
//                        //"Column", leftCol,
//                        "Split By", splitBy,
//                        "Delimiter/# of Characters", splitNum
//                };
//                    int optSplit = JOptionPane.showConfirmDialog(this.getParent(), splitCols, "Split Columns", JOptionPane.OK_CANCEL_OPTION);
//                    if (optSplit == JOptionPane.OK_OPTION) {
//                        boolean bSplitBy = false;
//                        if (splitBy.getSelectedIndex() == 1){
//                            bSplitBy = true;
//                        }
//                        dlManager.splitColumn(jTable1, bSplitBy, splitNum.getText());
//                        if (bSplitBy) {
//                            dlManager.updateEventLog(pbcsConstants.EVT_SPLIT_CHARS, Integer.toString(selectedColumn), Integer.toString(jTable1.getColumnCount() - 1), splitNum.getText());
//                        } else {
//                            dlManager.updateEventLog(pbcsConstants.EVT_SPLIT_DELIM, Integer.toString(selectedColumn), Integer.toString(jTable1.getColumnCount() - 1), splitNum.getText());
//                        }
//                    }
//            }
        }
    }//GEN-LAST:event_btnColumnActionsActionPerformed

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
        // TODO add your handling code here:
        final JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setFileFilter(new FileNameExtensionFilter("Text Files", "txt"));
        int returnVal = fc.showOpenDialog(null);
        
        if (returnVal == JFileChooser.APPROVE_OPTION){
            // Save Locally
//            try {
//                dlManager.exportFileFromTable(jTable1, fc.getSelectedFile(), arrDataColumn, arrIgnoreColumn);                
//            } catch (IOException ex) {
//                Logger.getLogger(PBCSAdmin.class.getName()).log(Level.SEVERE, null, ex);
//            }
            try {
                this.export = new ExportTblToFile(jTable1, dlManager.hmAcceptRejectItems);
                export.exportFileFromTable(jTable1, fc.getSelectedFile(), arrDataColumn, arrIgnoreColumn, false);
            } catch (Exception ex) {
                Logger.getLogger(PBCSAdmin.class.getName()).log(Level.SEVERE, null, ex);
            }
             //Upload File
            try{
                PBCSActions pbcsclient = new PBCSActions(pbcsUserName, pbcsDomain, pbcsPassword, pbcsUrl);
                pbcsclient.uploadFile(fc.getSelectedFile());
                refreshFMLists();
            } catch (Exception ex2) {
                JOptionPane.showMessageDialog(this.getParent(), "Error: " + ex2.getMessage());
            }
        }
    }//GEN-LAST:event_btnExportActionPerformed

    private void jTable1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTable1PropertyChange
        // TODO add your handling code here:
        //System.out.println(evt.getPropertyName());
        if (evt.getPropertyName() == "model") {            
            btnLoadProfile.setEnabled(true);
            btnSaveProfile.setEnabled(true);
            btnExport.setEnabled(true);

           for (int i = 0 ; i < jTable1.getColumnCount(); i++){
               arrColNames.add(i,"");
               arrDataColumn.add(i,"");
               arrIgnoreColumn.add(i, "");
           }
        }
    }//GEN-LAST:event_jTable1PropertyChange

    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased
        updateColProps();
    }//GEN-LAST:event_jTable1KeyReleased

    private void btnPrevFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevFieldActionPerformed
        // TODO add your handling code here:
        jTable1.setColumnSelectionInterval(jTable1.getSelectedColumn() - 1, jTable1.getSelectedColumn() - 1);
        updateColProps();
    }//GEN-LAST:event_btnPrevFieldActionPerformed

    public JTable getMainTable(){
        return jTable1;
    }
    
    private void btnNextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextFieldActionPerformed
        // TODO add your handling code here:
        
        jTable1.setColumnSelectionInterval(jTable1.getSelectedColumn() + 1, jTable1.getSelectedColumn() + 1);
        updateColProps();
    }//GEN-LAST:event_btnNextFieldActionPerformed

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        // TODO add your handling code here:
        try {
            pbcsUserName = txtUser.getText();
            pbcsPassword = new String(pwdPassword.getPassword());
            pbcsUrl = txtURL.getText();
            pbcsDomain = txtDomain.getText();

            //PBCSActions pbcsclient = new PBCSActions(pbcsUserName, pbcsDomain, pbcsPassword,
            //        pbcsUrl, pbcsConstants.DBG_PBCS_LCMVER, "POC_CITA");
            PBCSActions pbcsclient = new PBCSActions(pbcsUserName, pbcsDomain, pbcsPassword, pbcsUrl);
            pbcsclient.getServices();
            // Refresh File Manager Lists
            refreshFMLists();
            lblApp.setText(pbcsclient.getCurrentDetails("HP","AppName"));
            // Logged in & refreshed
            blnIsLoggedIn = true;
            JOptionPane.showMessageDialog(this.getParent(), "Login Successful");
            // Enable Panes
            for (int i = 1; i < MainTabbedPane.getTabCount(); i++) {
                MainTabbedPane.setEnabledAt(i, true);
            }

            if (pbcsConstants.DBG){
                System.out.println("LCM Version: " + pbcsclient.getCurrentDetails("LCM","Version"));
                System.out.println("LCM URL: " + pbcsclient.getCurrentDetails("LCM","URL"));
                System.out.println("HP Version: " + pbcsclient.getCurrentDetails("HP","Version"));
                System.out.println("HP URL: " + pbcsclient.getCurrentDetails("HP","URL"));
                System.out.println("App Name: " + pbcsclient.getCurrentDetails("HP","AppName"));
                System.out.println("App Type: " + pbcsclient.getCurrentDetails("HP","AppType"));
            }
            
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this.getParent(), "Error: " + ex.getMessage());
            blnIsLoggedIn = false;
        }
    }//GEN-LAST:event_btnLoginActionPerformed
    
    private void refreshFMLists(){
        try {
            // TODO add your handling code here:
           //PBCSActions pbcsclient = new PBCSActions(pbcsUserName, pbcsDomain, pbcsPassword,
           //         pbcsUrl, pbcsConstants.DBG_PBCS_HPVER, "POC_CITA");
            ArrayList<String> arrHeaders = new ArrayList<>(4);
            arrHeaders.add("Name");
            arrHeaders.add("Last Modified");
            arrHeaders.add("Size");
            PBCSActions pbcsclient = new PBCSActions(pbcsUserName, pbcsDomain, pbcsPassword, pbcsUrl);
            // New Table
            
            ArrayList<Object[]> arrRows = new ArrayList<Object[]>();
            arrRows = pbcsclient.getPlanningFileDetails();
            DefaultTableModel fileModel = fsManager.setTableModelFromStrArray(arrRows,arrHeaders);
            tblFiles.setModel(fileModel);
            // Old Lists
            ArrayList<String> arrJobs = pbcsclient.listJobs();
            DefaultListModel listModel = new DefaultListModel();
            for (String job: arrJobs){
                listModel.addElement(job);
            }
            lstJobs.setModel(listModel);


        } catch (Exception ex) {
            Logger.getLogger(PBCSAdmin.class.getName()).log(Level.SEVERE, null, ex);
        } 
	}
    
    private void btnLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadActionPerformed
        // TODO add your handling code here:
        if (lstJobs.getSelectedIndex() != -1 && tblFiles.getSelectedRow() != -1){
            try {
                PBCSActions pbcsclient = new PBCSActions(pbcsUserName, pbcsDomain, pbcsPassword, pbcsUrl);
                int JID = pbcsclient.ImportData(tblFiles.getValueAt(tblFiles.getSelectedRow(), 0).toString(), lstJobs.getSelectedValue());
                HashMap JobDetails = new HashMap();
                JobDetails = pbcsclient.getJobDetails(JID);
                lblJobID.setText(JobDetails.get("jobId").toString());
                lblJobName.setText(JobDetails.get("jobName").toString());
                lblJobStatus.setText(JobDetails.get("status").toString());
                lblJobDetails.setText(JobDetails.get("details").toString());
            } catch (Exception ex) {
                //Logger.getLogger(PBCSAdmin1.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this.getParent(), "Error: " + ex.getMessage());
            }
        }else {
            JOptionPane.showMessageDialog(this.getParent(), "Please Select a Load File & Job");
        }
    }//GEN-LAST:event_btnLoadActionPerformed

    private void btnCldRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCldRefreshActionPerformed
        // TODO add your handling code here:
         if(blnIsLoggedIn){
            refreshFMLists();
        } else {
            JOptionPane.showMessageDialog(this.getParent(), "You are not logged in!");
        }
    }//GEN-LAST:event_btnCldRefreshActionPerformed

    private void btnCldUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCldUploadActionPerformed
        // TODO add your handling code here:
        if(blnIsLoggedIn){
            final JFileChooser fc = new JFileChooser();
            fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
            fc.setFileFilter(new FileNameExtensionFilter("Text Files", "txt"));
            int returnVal = fc.showOpenDialog(null);

            if (returnVal == JFileChooser.APPROVE_OPTION){
                 //Upload File
                try{
                    //PBCSActions pbcsclient = new PBCSActions(pbcsUserName, pbcsDomain, pbcsPassword,
                    //    pbcsUrl, pbcsConstants.DBG_PBCS_HPVER, "POC_CITA");
                    PBCSActions pbcsclient = new PBCSActions(pbcsUserName, pbcsDomain, pbcsPassword, pbcsUrl);
                    pbcsclient.uploadFile(fc.getSelectedFile());
                    refreshFMLists();
                } catch (Exception ex2) {
                    JOptionPane.showMessageDialog(this.getParent(), "Error: " + ex2.getMessage());
                }
            }
        } else {
            JOptionPane.showMessageDialog(this.getParent(), "You are not logged in!");
        }
    }//GEN-LAST:event_btnCldUploadActionPerformed

    private void btnCldDownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCldDownloadActionPerformed
        try {
            if (tblFiles.getSelectedRow() == -1){
                JOptionPane.showMessageDialog(this.getParent(), "Please Select a File");
            } else {
                final JFileChooser fc = new JFileChooser();
                fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
                fc.setFileFilter(new FileNameExtensionFilter("Text Files", "txt"));
                int returnVal = fc.showOpenDialog(null);
                if (returnVal == JFileChooser.APPROVE_OPTION){
                    PBCSActions pbcsclient = new PBCSActions(pbcsUserName, pbcsDomain, pbcsPassword, pbcsUrl);
                    pbcsclient.downloadFile(tblFiles.getValueAt(tblFiles.getSelectedRow(), 0).toString(),fc.getSelectedFile().toString());
                    JOptionPane.showMessageDialog(this.getParent(), tblFiles.getValueAt(tblFiles.getSelectedRow(), 0).toString() + " downloaded to " + fc.getSelectedFile().toString() + " successfully!");
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(PBCSAdmin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnCldDownloadActionPerformed

    private void btnCldDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCldDeleteActionPerformed
        // TODO add your handling code here:
        try {
            PBCSActions pbcsclient = new PBCSActions(pbcsUserName, pbcsDomain, pbcsPassword, pbcsUrl);
            pbcsclient.deleteFile(tblFiles.getValueAt(tblFiles.getSelectedRow(), 0).toString());
            refreshFMLists();
        } catch (Exception ex) {
                Logger.getLogger(PBCSAdmin.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_btnCldDeleteActionPerformed

    private void btnSaveProfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveProfileActionPerformed
        // TODO add your handling code here:
        dlManager.saveFile();
    }//GEN-LAST:event_btnSaveProfileActionPerformed

    private void btnLoadProfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadProfileActionPerformed
        try {
            // TODO add your handling code here:
            //dlManager.openProfile(jTable1);
            //hm = dlManager.openProfile(jTable1);
            //jTable1.clearSelection();
            hm.putAll(dlManager.openProfile(jTable1));
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(PBCSAdmin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnLoadProfileActionPerformed

    private void btnFindReplaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindReplaceActionPerformed
        // TODO add your handling code here:
        jdFindReplace.setVisible(true);
        dlManager.getFindReplaceItems(jTable1.getColumnModel().getColumn(jTable1.getSelectedColumn()).getHeaderValue().toString(), tblFindReplace, jTable1.getSelectedColumn(), jTable1.getColumnCount());
        
    }//GEN-LAST:event_btnFindReplaceActionPerformed

    private void btnFnRCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFnRCloseActionPerformed
        // TODO add your handling code here:
        jdFindReplace.dispose();
    }//GEN-LAST:event_btnFnRCloseActionPerformed

    private void btnFnROKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFnROKActionPerformed
        // TODO add your handling code here:
//        for (int i = 0; i < tblFindReplace.getRowCount() ; i++) {
//            dlManager.saveFindReplaceItems(jTable1.getColumnModel().getColumn(jTable1.getSelectedColumn()).getHeaderValue().toString(), 
//                    tblFindReplace.getValueAt(i, 0).toString(), tblFindReplace.getValueAt(i, 1).toString(), Boolean.parseBoolean(tblFindReplace.getValueAt(i, 2).toString()),
//                    Boolean.parseBoolean(tblFindReplace.getValueAt(i, 3).toString()));
//        }
        dlManager.saveFindReplaceItems(jTable1.getColumnModel().getColumn(jTable1.getSelectedColumn()).getHeaderValue().toString(), tblFindReplace, jTable1.getSelectedColumn());
        dlManager.executeFindReplaceItems(jTable1);
        jdFindReplace.dispose();
    }//GEN-LAST:event_btnFnROKActionPerformed

    private void btnFnRPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFnRPrevActionPerformed
        // TODO add your handling code here:
        //tblFindReplace.setModel(dlManager.getFindReplaceItems(tblFindReplace, jTable1.getSelectedColumn(), jTable1.getColumnCount()));
        jTable1.setColumnSelectionInterval(jTable1.getSelectedColumn() - 1, jTable1.getSelectedColumn() - 1);
        //tblFindReplace.setModel(dlManager.getFindReplaceItems(tblFindReplace, jTable1.getSelectedColumn(), jTable1.getColumnCount()));
        dlManager.getFindReplaceItems(jTable1.getColumnModel().getColumn(jTable1.getSelectedColumn()).getHeaderValue().toString(), tblFindReplace, jTable1.getSelectedColumn(), jTable1.getColumnCount());
        //dlManager.getAcceptRejectItems(jTable1.getColumnModel().getColumn(jTable1.getSelectedColumn()).getHeaderValue().toString(), tblFindReplace, jTable1.getSelectedColumn(), jTable1.getColumnCount());
        updateColProps();
        
    }//GEN-LAST:event_btnFnRPrevActionPerformed

    private void btnFnRNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFnRNextActionPerformed
        // TODO add your handling code here:
        //tblFindReplace.setModel(dlManager.getFindReplaceItems(tblFindReplace, jTable1.getSelectedColumn(), jTable1.getColumnCount()));
        jTable1.setColumnSelectionInterval(jTable1.getSelectedColumn() + 1, jTable1.getSelectedColumn() + 1);
        //tblFindReplace.setModel(dlManager.getFindReplaceItems(tblFindReplace, jTable1.getSelectedColumn(), jTable1.getColumnCount()));
        dlManager.getFindReplaceItems(jTable1.getColumnModel().getColumn(jTable1.getSelectedColumn()).getHeaderValue().toString(), tblFindReplace, jTable1.getSelectedColumn(), jTable1.getColumnCount());
        //dlManager.getAcceptRejectItems(jTable1.getColumnModel().getColumn(jTable1.getSelectedColumn()).getHeaderValue().toString(), tblFindReplace, jTable1.getSelectedColumn(), jTable1.getColumnCount());
        updateColProps();
    }//GEN-LAST:event_btnFnRNextActionPerformed

    private void btnFnRAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFnRAddActionPerformed
        // TODO add your handling code here:
        //((DefaultTableModel) tblFindReplace.getModel()).addRow(new Object[tblFindReplace.getColumnCount()]);
        ((DefaultTableModel) tblFindReplace.getModel()).addRow(new Object[]{ "", "", false, false});
    }//GEN-LAST:event_btnFnRAddActionPerformed

    private void btnFnRRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFnRRemoveActionPerformed
        // TODO add your handling code here:
        try {
            ((DefaultTableModel) tblFindReplace.getModel()).removeRow(tblFindReplace.getSelectedRow());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this.getParent(), "Please select a row to delete");
        }
        
    }//GEN-LAST:event_btnFnRRemoveActionPerformed

    private void btnSaveFnRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveFnRActionPerformed
        // TODO add your handling code here:
        dlManager.saveFindReplaceItems(jTable1.getColumnModel().getColumn(jTable1.getSelectedColumn()).getHeaderValue().toString(), tblFindReplace, jTable1.getSelectedColumn());
    }//GEN-LAST:event_btnSaveFnRActionPerformed

    private void btnAccRejActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAccRejActionPerformed
        // TODO add your handling code here:
        //AcceptReject.main(args);
       // jdFindReplace.setVisible(true);
//       try {
//            this.export = new ExportTblToFile(jTable1, dlManager.hmAcceptRejectItems);
//        } catch (Exception ex) {
//            Logger.getLogger(PBCSAdmin.class.getName()).log(Level.SEVERE, null, ex);
//        }
       //AcceptReject accRej = new AcceptReject(this,true);
       accRej.setVisible(true);
       dlManager.getAcceptRejectItems(jTable1.getColumnModel().getColumn(jTable1.getSelectedColumn()).getHeaderValue().toString(), accRej.getAcceptRejectTable() , jTable1.getSelectedColumn(), jTable1.getColumnCount());
       //export.setAcceptReject();
    }//GEN-LAST:event_btnAccRejActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PBCSAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PBCSAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PBCSAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PBCSAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                if (args.length == 5){
                    new PBCSAdmin().setVisible(false);
                    PBCSCommandLine clInt = new PBCSCommandLine(args[0], args[1], args[2], args[3], args[4]);
                    clInt.transformAndLoad();
                    System.exit(0);
                } else if (args.length == 0) {
                new PBCSAdmin().setVisible(true);
                } else {
                    System.out.println("Invalid number of arguments specified. Please provide:");
                    System.out.println(" Profile\n Data File Path\n Delimiter\n PBCS Job Name\n Out File Name");
                    System.exit(0);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane MainTabbedPane;
    private javax.swing.ButtonGroup btgDelimiter;
    private javax.swing.JButton btnAccRej;
    private javax.swing.JButton btnBrowse;
    private javax.swing.JButton btnCldDelete;
    private javax.swing.JButton btnCldDownload;
    private javax.swing.JButton btnCldRefresh;
    private javax.swing.JButton btnCldUpload;
    private javax.swing.JButton btnColumnActions;
    private javax.swing.JButton btnExport;
    private javax.swing.JButton btnFindReplace;
    private javax.swing.JButton btnFnRAdd;
    private javax.swing.JButton btnFnRClose;
    private javax.swing.JButton btnFnRNext;
    private javax.swing.JButton btnFnROK;
    private javax.swing.JButton btnFnRPrev;
    private javax.swing.JButton btnFnRRemove;
    private javax.swing.JButton btnLoad;
    private javax.swing.JButton btnLoadProfile;
    private javax.swing.JButton btnLoadSQL;
    private javax.swing.JButton btnLogin;
    private javax.swing.JButton btnNextField;
    private javax.swing.JButton btnPrevField;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSaveFnR;
    private javax.swing.JButton btnSaveProfile;
    private javax.swing.JButton btnUpdateField;
    private javax.swing.JCheckBox cbData;
    private javax.swing.JCheckBox cbFlipSign;
    private javax.swing.JCheckBox cbIgnoreCol;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JDialog jdFindReplace;
    private javax.swing.JLabel lblApp;
    private javax.swing.JLabel lblColName;
    private javax.swing.JLabel lblColumn;
    private javax.swing.JLabel lblDBG;
    private javax.swing.JLabel lblDelim;
    private javax.swing.JLabel lblDisplayRows;
    private javax.swing.JLabel lblDisplayRows2;
    private javax.swing.JLabel lblDomain;
    private javax.swing.JLabel lblFnRSelectedCol;
    private javax.swing.JLabel lblImportJobs;
    private javax.swing.JLabel lblJobDetails;
    private javax.swing.JLabel lblJobID;
    private javax.swing.JLabel lblJobName;
    private javax.swing.JLabel lblJobStatus;
    private javax.swing.JLabel lblLoadFiles;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblPassword1;
    private javax.swing.JLabel lblPrefix;
    private javax.swing.JLabel lblStartRow;
    private javax.swing.JLabel lblSuffix;
    private javax.swing.JLabel lblURL;
    private javax.swing.JLabel lblUser;
    private javax.swing.JList<String> lstJobs;
    private javax.swing.JPanel pnlColProps;
    private javax.swing.JPanel pnlDSMgmt;
    private javax.swing.JPanel pnlJobDetails;
    private javax.swing.JPanel pnlLoadData;
    private javax.swing.JPasswordField pwdPassword;
    private javax.swing.JRadioButton rbComma;
    private javax.swing.JRadioButton rbCustom;
    private javax.swing.JRadioButton rbSpace;
    private javax.swing.JRadioButton rbTab;
    private javax.swing.JPanel tabDLMgr;
    private javax.swing.JPanel tabFSMgr;
    private javax.swing.JPanel tabLogin;
    private javax.swing.JTable tblFiles;
    private javax.swing.JTable tblFindReplace;
    private javax.swing.JLabel titleJobDetails;
    private javax.swing.JLabel titleJobID;
    private javax.swing.JLabel titleJobName;
    private javax.swing.JLabel titleJobStatus;
    private javax.swing.JTextField txtColName;
    private javax.swing.JTextField txtCustDelim;
    private javax.swing.JTextField txtDisplayRows;
    private javax.swing.JTextField txtDomain;
    private javax.swing.JTextField txtHeaderRows;
    private javax.swing.JTextField txtPrefix;
    private javax.swing.JTextField txtStartRow;
    private javax.swing.JTextField txtSuffix;
    private javax.swing.JTextField txtURL;
    private javax.swing.JTextField txtUser;
    // End of variables declaration//GEN-END:variables
}
